var sax = require('sax'),
    EventEmitter = require('events').EventEmitter,
    util = require('util');
    
var Xmljson = function() {
  var self = this;
  
  this.parser = sax.parser(true);
  this.result = null;
  
  var stack = [];
  
  this.parser.onopentag = function(node) {
    var obj = {};
    obj['#'] = "";
    
    if (Object.keys(node.attributes).length) {
      node.attributes.forEach(function(v, k) {
        if (typeof obj['@'] === 'undefined') {
          obj['@'] = {};
        }
        
        obj['@'][k] = v;
      });
    }
    
    obj['#name'] = node.name;
    stack.push(obj);
  };
  
  this.parser.onclosetag = function() {
    var obj = stack.pop();
    var nodeName = obj['#name'];
    delete obj['#name'];
    var s = stack[stack.length-1];
    
    if (obj['#'].match(/^s*$/)) {
      delete obj['#'];
    } else {
      obj['#'] = obj['#'].replace(/\s{2,}/g, " ").trim();
      
      if (Object.keys(obj).length == 1 && '#' in obj) {
        obj = obj['#'];
      }
    }
    
    if (stack.length > 0) {
      if (typeof s[nodeName] === 'undefined') {
        s[nodeName] = obj;
      } else if (s[nodeName] instanceof Array) {
        s[nodeName].push(obj);
      } else {
        var old = s[nodeName];
        s[nodeName] = [old];
        s[nodeName].push(obj);
      }
    } else {
      self.result = obj;
      self.emit("end", self.result);
    }
  };
  
  this.parser.ontext = this.parser.oncdata = function(text) {
    var s = stack[stack.length-1];
    if (s) {
      s['#'] += text;
    }
  };
};

util.inherits(Xmljson, EventEmitter);

Xmljson.prototype.parse = function(xml) {
  this.parser.write(xml.toString());
};

Xmljson.prototype.close = function() {
  this.parser.close();
};

module.exports = Xmljson;